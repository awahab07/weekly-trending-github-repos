{"version":3,"sources":["app/hmr.ts","app/theme/theme.ts","app/theme/contants.ts","shared/BoxComponents/BoxGrid.tsx","shared/BoxComponents/BoxTypography.tsx","shared/ErrorRenderer/ErrorRenderer.tsx","shared/Spinner/Spinner.tsx","features/repository/components/RepositoryAttributes.tsx","features/repository/components/Repository.tsx","features/repository/components/RepositoryList.tsx","features/repository/components/RepositoryContainer.tsx","app/App.tsx","app/serviceWorker.ts","store/root.saga.ts","store/store.ts","index.tsx","features/repository/state/reducer.ts","config/index.js","api/github.api.ts","features/repository/state/sagas.ts","store/root.reducer.ts","shared/utils/Persistence.ts","shared/index.ts"],"names":["runForHmr","fns","module","process","NODE_ENV","hot","accept","call","appTheme","responsiveFontSizes","createMuiTheme","palette","primary","indigo","main","secondary","blueGrey","typography","fontFamily","fadeBorder","fade","light","headerBorder","useAppStyles","makeStyles","theme","rootWrapper","maxWidth","minHeight","overflowX","contentWrapper","width","sectionBg","backgroundColor","grey","headLink","textDecoration","color","fontWeight","h3","fontSize","noBorder","border","borderColor","success","dark","BoxGrid","props","Box","relative","fromTop","fromBottom","fromLeft","fromRight","omitCustomProps","component","clone","undefined","Grid","computedProps","position","top","bottom","left","right","computeOverrideBoxProps","children","BoxTypography","variant","gutterBottom","boxGridOnlyProps","Typography","typographyOnlyProps","ErrorRenderer","message","useTheme","my","p","bgcolor","error","contrastText","Spinner","display","height","alignItems","justifyContent","CircularProgress","NumFormatter","Intl","NumberFormat","useStyles","root","RepositoryAttributes","repo","classes","container","direction","spacing","wrap","item","Computer","language","StarRate","format","stargazers_count","extras","starred","getStarCount","DeviceHub","forks_count","borderRadius","src","owner","avatar_url","repositoryLink","h2","Repository","onStarRepo","className","pt","borderTop","flexDirection","GitHub","href","html_url","target","login","name","py","description","Button","onClick","title","aria-label","Star","StarBorder","useAutocompleteStyles","minWidth","RepositoryList","appClasses","autocompleteClasses","repositories","getAppliedLanguageFilter","filters","find","f","key","value","ToggleButtonGroup","getAppliedRepositoryTypeFilter","exclusive","onChange","event","onUpdateFilter","operator","ToggleButton","Autocomplete","id","options","availableLanguages","renderInput","params","TextField","label","reason","map","index","RepositoryContainer","dispatch","useDispatch","useSelector","state","repositorySlice","shallowEqual","loading","useState","setFilters","useEffect","repositoryActions","getRepositories","Helmet","updateRepositoryStarred","repository","star","filter","prevFilters","otherFilters","App","ThemeProvider","CssBaseline","justify","path","exact","from","to","Boolean","window","location","hostname","match","rootSaga","all","fork","repositoryListener","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","store","configureStore","reducer","rootReducer","run","render","ReactDOM","StrictMode","document","getElementById","newRootReducer","require","default","replaceReducer","navigator","serviceWorker","ready","then","registration","unregister","catch","console","slice","createSlice","initialState","reducers","action","getRepositoriesSuccess","payload","getRepositoriesFailure","updateRepositoryStarredSuccess","updateRepositoryStarredFailure","actions","config","baseUrl","axios","defaults","headers","persistence","Persistence","getWeeklyRepos","weekFilter","moment","subtract","starredFilter","queryFilters","filtersQueryString","join","url","get","res","data","items","repos","starredIds","includes","r","starRepo","Promise","resolve","starredRepoIds","set","unStarRepo","fetchRepositories","updateRepository","listener","githubApi","fetchedRepos","put","methodToCall","takeLatest","type","combineReducers","repositoryReducer","win","storage","w","this","localStorage","setItem","JSON","stringify","getItem","parse"],"mappings":"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","file":"static/js/main.3ebeb1f6.chunk.js","sourcesContent":["export type HmrAcceptor = (module: string, callback: () => void) => void;\n\nconst runForHmr = (fns: ((accept: HmrAcceptor) => void)[]): void => {\n  if (\n    module && process?.env?.NODE_ENV === 'development' && (module as any).hot\n  ) {\n    const accept: HmrAcceptor = (module as any).hot.accept;\n    for (const f of fns) {\n      f.call(module, accept);\n    }\n  }\n};\n\nexport default runForHmr;\n","import { createMuiTheme, Theme } from '@material-ui/core';\nimport { blueGrey, indigo } from '@material-ui/core/colors';\nimport { makeStyles, responsiveFontSizes } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { fontFamily, maxContentViewportWidth, primaryColor } from './contants';\n\nexport const appTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        ...indigo,\n        main: primaryColor,\n      },\n      secondary: blueGrey,\n    },\n    typography: {\n      fontFamily,\n    },\n  })\n);\n\nexport const fadeBorder = fade(appTheme.palette.secondary.light, 0.2);\nexport const headerBorder = fade(appTheme.palette.secondary.light, 0.4);\n\nexport const useAppStyles = makeStyles((theme: Theme) => ({\n  rootWrapper: {\n    maxWidth: '100vw',\n    minHeight: '100vh',\n    overflowX: 'hidden',\n  },\n  contentWrapper: {\n    width: '100vw',\n    maxWidth: maxContentViewportWidth,\n  },\n  sectionBg: {\n    backgroundColor: theme.palette.grey['200'],\n  },\n  headLink: {\n    textDecoration: 'none',\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.h3.fontWeight,\n    fontSize: theme.typography.h3.fontSize,\n  },\n  noBorder: {\n    border: 'none'\n  },\n  fadeBorder: {\n    borderColor: fadeBorder,\n  },\n  headerBorder: {\n    borderColor: headerBorder,\n  },\n  success: {\n    color: theme.palette.success.dark,\n  },\n}));\n\nexport const getAppSpacing = (spacing: number) => appTheme.spacing(spacing);\n","export const primaryColor = '#0366d6';\nexport const fontFamily = 'sans-serif';\nexport const maxContentViewportWidth = 1024;\n","import { Box, BoxProps, Grid, GridProps } from '@material-ui/core';\nimport React, { FunctionComponent, PropsWithChildren } from 'react';\n\nexport interface IBoxGridProps extends PropsWithChildren<BoxProps & GridProps> {\n  relative?: boolean;\n  fromTop?: number | string;\n  fromBottom?: number | string;\n  fromLeft?: number | string;\n  fromRight?: number | string;\n}\n\nconst omitCustomProps = (props: IBoxGridProps): IBoxGridProps => {\n  const { relative, fromTop, fromBottom, fromLeft, fromRight, ...rest } = props;\n\n  return rest;\n};\n\nconst computeOverrideBoxProps = (props: IBoxGridProps): IBoxGridProps => {\n  let computedProps = {};\n\n  if (props.relative === true) {\n    computedProps = { ...computedProps, position: 'relative' };\n  }\n\n  if (props.fromTop !== undefined) {\n    computedProps = { ...computedProps, position: 'absolute', top: props.fromTop };\n  }\n\n  if (props.fromBottom !== undefined) {\n    computedProps = { ...computedProps, position: 'absolute', bottom: props.fromBottom };\n  }\n\n  if (props.fromLeft !== undefined) {\n    computedProps = { ...computedProps, position: 'absolute', left: props.fromLeft };\n  }\n\n  if (props.fromRight !== undefined) {\n    computedProps = { ...computedProps, position: 'absolute', right: props.fromRight };\n  }\n\n  return computedProps;\n};\n\nconst BoxGrid: FunctionComponent<IBoxGridProps> = (props: IBoxGridProps) => {\n  return (\n    <Box\n      {...omitCustomProps(props)}\n      component={props.clone ? undefined : Grid}\n      {...computeOverrideBoxProps(props)}\n    >\n      {props.children}\n    </Box>\n  );\n};\n\nexport default BoxGrid;\n","import { Typography, TypographyProps } from '@material-ui/core';\nimport React, { FunctionComponent, PropsWithChildren } from 'react';\nimport BoxGrid, { IBoxGridProps } from './BoxGrid';\n\ninterface IBoxTypographyProps extends PropsWithChildren<IBoxGridProps & TypographyProps> {}\n\nexport const typographyOnlyProps = (props: PropsWithChildren<IBoxGridProps & TypographyProps>) => {\n  const { variant, gutterBottom } = props;\n\n  return { variant, gutterBottom };\n};\n\nexport const boxGridOnlyProps = (props: PropsWithChildren<IBoxGridProps & TypographyProps>) => {\n  const { variant, gutterBottom, ...rest } = props;\n\n  return rest;\n};\n\nconst BoxTypography: FunctionComponent<IBoxTypographyProps> = (props: IBoxTypographyProps) => {\n  return (\n    <BoxGrid {...boxGridOnlyProps(props)}>\n      <Typography {...typographyOnlyProps(props)}>{props.children}</Typography>\n    </BoxGrid>\n  );\n};\n\nexport default BoxTypography;\n","import { useTheme } from '@material-ui/core';\nimport React from 'react';\nimport BoxTypography from '../BoxComponents/BoxTypography';\n\nconst ErrorRenderer = ({ message }: { message: string }) => {\n  const theme = useTheme();\n\n  return (\n    <BoxTypography\n      my={2}\n      p={2}\n      bgcolor={theme.palette.error.contrastText}\n      color={theme.palette.error.main}\n    >\n      {message}\n    </BoxTypography>\n  );\n};\n\nexport default ErrorRenderer;\n","import { Box, CircularProgress } from '@material-ui/core';\nimport React from 'react';\n\nconst Spinner = () => (\n  <Box position={'absolute'} display={'flex'} left={0} top={0} width={1} height={1} alignItems={'center'} justifyContent={'center'}>\n    <CircularProgress />\n  </Box>\n);\n\nexport default Spinner;\n","import { Box, Grid, Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Computer, DeviceHub, StarRate } from '@material-ui/icons';\nimport React from 'react';\nimport { IRepository } from '../../../models';\n\nconst NumFormatter = new Intl.NumberFormat();\n\nconst getStarCount = (repo: IRepository): string =>\n  NumFormatter.format(repo.stargazers_count + (repo.extras.starred ? 1 : 0));\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    maxWidth: 100,\n  },\n}));\n\nconst RepositoryAttributes = ({ repo }: { repo: IRepository }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container direction={'row'} alignItems={'baseline'} spacing={2} wrap={'nowrap'}>\n      <Grid classes={classes} container={true} item={true} alignItems={'flex-end'}>\n        <Computer />\n        <strong>{repo.language}</strong>\n      </Grid>\n\n      <Grid classes={classes} container={true} item={true} alignItems={'flex-end'}>\n        <StarRate />\n        {getStarCount(repo)}\n      </Grid>\n\n      <Grid classes={classes} container={true} item={true} alignItems={'flex-end'}>\n        <DeviceHub />\n        {NumFormatter.format(repo.forks_count)}\n      </Grid>\n\n      <Box alignItems={'flex-end'} borderRadius={'50%'} width={24} height={24} clone>\n        <img src={repo.owner.avatar_url} />\n      </Box>\n    </Grid>\n  );\n};\n\nexport default RepositoryAttributes;\n","import { Button, Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GitHub, Star, StarBorder } from '@material-ui/icons';\nimport React from 'react';\nimport { IRepository } from '../../../models';\nimport { BoxGrid } from '../../../shared/BoxComponents';\nimport BoxTypography from '../../../shared/BoxComponents/BoxTypography';\nimport RepositoryAttributes from './RepositoryAttributes';\n\ninterface IRepositoryProps {\n  repo: IRepository;\n  className?: string;\n  onStarRepo: (repo: IRepository) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  repositoryLink: {\n    textDecoration: 'none',\n    color: theme.palette.primary.main,\n    fontSize: theme.typography.h2.fontSize,\n  },\n}));\n\nconst Repository: React.FunctionComponent<IRepositoryProps> = (\n  props: IRepositoryProps\n): React.ReactElement => {\n  const classes = useStyles();\n  const { repo, onStarRepo } = props;\n\n  const handleStarClick = () => {\n    onStarRepo(repo);\n  };\n\n  return (\n    <>\n      <BoxGrid container className={props.className} p={2} pt={4} alignItems={'center'} borderTop={1}>\n        <BoxGrid flexDirection={'column'} clone={true} width={9 / 10}>\n          <article>\n            <BoxGrid container spacing={2} alignItems={'center'}>\n              <BoxGrid width={32} clone>\n                <GitHub fontSize={'small'} />\n              </BoxGrid>\n\n              <a className={classes.repositoryLink} href={repo.html_url} target={'_blank'}>\n                <BoxTypography variant={'subtitle1'}>\n                  {repo.owner.login} / <strong>{repo.name}</strong>\n                </BoxTypography>\n              </a>\n            </BoxGrid>\n\n            <BoxTypography py={2} variant={'body1'}>\n              {repo.description}\n            </BoxTypography>\n\n            <RepositoryAttributes repo={repo} />\n          </article>\n        </BoxGrid>\n\n        <Button\n          color={'primary'}\n          onClick={handleStarClick}\n          title={repo.extras.starred ? 'Un Star Repo' : 'Star Repo'}\n          aria-label={repo.extras.starred ? 'Un Star Repo' : 'Star Repo'}\n        >\n          {repo.extras.starred ? (\n            <>\n              <Star />\n            </>\n          ) : (\n            <>\n              <StarBorder />\n            </>\n          )}\n        </Button>\n      </BoxGrid>\n    </>\n  );\n};\n\nexport default Repository;\n","import { TextField, Theme } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete, { AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport React, { ChangeEvent } from 'react';\nimport { useAppStyles } from '../../../app/theme';\nimport { IRepository } from '../../../models';\nimport { IRepositoryFilter } from '../../../shared';\nimport { BoxGrid } from '../../../shared/BoxComponents';\nimport Repository from './Repository';\n\ninterface IRepositoryListProps {\n  repositories: IRepository[];\n  availableLanguages: string[];\n  filters: IRepositoryFilter[];\n  onStarRepo: (repo: IRepository) => void;\n  onUpdateFilter: (filter: IRepositoryFilter) => void;\n}\n\nconst useAutocompleteStyles = makeStyles((theme: Theme) => ({\n  root: {\n    minWidth: 200,\n  },\n}));\n\nconst RepositoryList: React.FunctionComponent<IRepositoryListProps> = (\n  props: IRepositoryListProps\n): React.ReactElement => {\n  const appClasses = useAppStyles();\n  const autocompleteClasses = useAutocompleteStyles();\n\n  const { repositories } = props;\n\n  const getAppliedRepositoryTypeFilter = () =>\n    props.filters.find((f) => f.key === 'starred')?.value ?? 'false';\n\n  const getAppliedLanguageFilter = () => props.filters.find((f) => f.key === 'language')?.value ?? null;\n\n  const handleStarredToggle = (event: any, value: string) => {\n    props.onUpdateFilter({ key: 'starred', operator: '=', value });\n  };\n\n  const handleLanguageChange = (\n    event: ChangeEvent<{}>,\n    value: string | null,\n    reason: AutocompleteChangeReason\n  ) => {\n    props.onUpdateFilter({ key: 'language', operator: '=', value: value ?? '' });\n  };\n\n  return (\n    <>\n      <BoxGrid my={2} className={appClasses.headerBorder} border={1}>\n        <BoxGrid\n          p={4}\n          justifyContent={'space-between'}\n          className={appClasses.sectionBg}\n          display={'flex'}\n          flexDirection={'row'}\n          clone={true}\n        >\n          <section>\n            <ToggleButtonGroup\n              value={getAppliedRepositoryTypeFilter()}\n              color={'primary'}\n              exclusive\n              onChange={handleStarredToggle}\n              aria-label={'Repositories All or Starred'}\n            >\n              <ToggleButton value={'false'} aria-label={'All Repositories'}>\n                All Repositories\n              </ToggleButton>\n              <ToggleButton value={'true'} aria-label={'Starred Repositories'}>\n                Starred Repositories\n              </ToggleButton>\n            </ToggleButtonGroup>\n\n            <Autocomplete\n              id={'language-filter'}\n              classes={autocompleteClasses}\n              options={props.availableLanguages}\n              value={getAppliedLanguageFilter()}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label={getAppliedLanguageFilter() ? 'Language' : 'Language (Any)'}\n                />\n              )}\n              onChange={handleLanguageChange}\n            />\n          </section>\n        </BoxGrid>\n        {repositories.map((repo: IRepository, index: number) => (\n          <Repository\n            key={repo.id}\n            className={appClasses.fadeBorder}\n            repo={repo}\n            onStarRepo={props.onStarRepo}\n          />\n        ))}\n      </BoxGrid>\n    </>\n  );\n};\n\nexport default RepositoryList;\n","import { Box } from '@material-ui/core';\nimport React, {\n  FunctionComponent,\n  PropsWithChildren,\n  ReactElement,\n  useEffect,\n  useState,\n} from 'react';\nimport { Helmet } from 'react-helmet';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useAppStyles } from '../../../app/theme';\nimport { IRepository } from '../../../models';\nimport { IRepositoryFilter } from '../../../shared';\nimport BoxTypography from '../../../shared/BoxComponents/BoxTypography';\nimport ErrorRenderer from '../../../shared/ErrorRenderer/ErrorRenderer';\nimport Spinner from '../../../shared/Spinner/Spinner';\nimport { RootState } from '../../../store';\nimport { repositoryActions } from '../index';\nimport RepositoryList from './RepositoryList';\n\nconst RepositoryContainer: FunctionComponent = (props: PropsWithChildren<{}>): ReactElement => {\n  const appClasses = useAppStyles();\n  const dispatch = useDispatch();\n  const { repositories, loading, error } = useSelector(\n    (state: RootState) => state.repositorySlice,\n    shallowEqual\n  );\n\n  const [filters, setFilters] = useState<IRepositoryFilter[]>([]);\n\n  useEffect(() => {\n    dispatch(repositoryActions.getRepositories({ filters }));\n  }, [filters]);\n\n  // For demonstration, using hard coded values\n  const availableLanguages: string[] = [\n    'JavaScript',\n    'Python',\n    'TypeScript',\n    'Swift',\n    'Java',\n    'PHP',\n    'Go',\n    'Rust',\n  ];\n\n  const seoTitle = 'Github | Trending Repositories';\n\n  const handleStarRepo = (repo: IRepository): void => {\n    dispatch(\n      repositoryActions.updateRepositoryStarred({\n        repository: repo,\n        star: !repo.extras.starred,\n        filters,\n      })\n    );\n  };\n\n  const handleFilterUpdate = (filter: IRepositoryFilter): void => {\n    setFilters((prevFilters) => {\n      const otherFilters = prevFilters.filter((f) => f.key !== filter.key);\n\n      if ((filter.value ?? null) !== null && filter.value !== '') {\n        return [filter, ...otherFilters];\n      }\n\n      return otherFilters;\n    });\n  };\n\n  return (\n    <>\n      <Helmet>{seoTitle}</Helmet>\n\n      {loading ? <Spinner /> : null}\n\n      <Box\n        display={'flex'}\n        p={2}\n        className={appClasses.sectionBg}\n        flexDirection={'column'}\n        alignItems={'center'}\n        width={1}\n        component={'section'}\n      >\n        <BoxTypography variant={'h1'}>Trending</BoxTypography>\n\n        <BoxTypography variant={'subtitle1'}>\n          See which repositories are trending this week.\n        </BoxTypography>\n      </Box>\n\n      {error ? <ErrorRenderer message={error} /> : null}\n\n      <RepositoryList\n        repositories={repositories}\n        availableLanguages={availableLanguages}\n        filters={filters}\n        onStarRepo={handleStarRepo}\n        onUpdateFilter={handleFilterUpdate}\n      />\n    </>\n  );\n};\n\nexport default RepositoryContainer;\n","import { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport RepositoryContainer from '../features/repository/components/RepositoryContainer';\nimport { BoxGrid } from '../shared/BoxComponents';\nimport { appTheme, useAppStyles } from './theme';\n\nconst App: React.FunctionComponent = (): React.ReactElement => {\n  const classes = useAppStyles();\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <CssBaseline>\n        <HashRouter>\n          <BoxGrid container classes={{ root: classes.rootWrapper }} justify={'center'}>\n            <BoxGrid className={classes.contentWrapper}>\n              <Switch>\n                <Route path=\"/repositories\">\n                  <RepositoryContainer />\n                </Route>\n                <Redirect exact={true} from=\"/\" to=\"/repositories\" />\n              </Switch>\n            </BoxGrid>\n          </BoxGrid>\n        </HashRouter>\n      </CssBaseline>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        // tslint:disable-next-line:no-console\n        console.error(error.message);\n      });\n  }\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { repositoryListener } from '../features/repository';\n\nexport const rootSaga = function* root(): Generator {\n  yield all([fork(repositoryListener)]);\n};\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { HmrAcceptor } from '../app/hmr';\n\nimport rootReducer from './root.reducer';\nimport { rootSaga } from './root.saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middleware = [...getDefaultMiddleware({ thunk: false }), sagaMiddleware];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport const acceptHotStore = (accept: HmrAcceptor): void => {\n  accept('./root.reducer', (): void => {\n    const newRootReducer = require('./root.reducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n};\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './app/App';\nimport runForHmr, { HmrAcceptor } from './app/hmr';\nimport * as serviceWorker from './app/serviceWorker';\nimport store, { acceptHotStore } from './store';\n\nconst render = (): void => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nrender();\n\nconst acceptHotApp = (accept: HmrAcceptor): void => {\n  accept('./app/App', render);\n};\n\nrunForHmr([acceptHotStore, acceptHotApp]);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IRepository } from '../../../models';\nimport { IRepositoryFilter } from '../../../shared';\n\nexport const sliceName = 'repositories';\n\ninterface IState {\n  repositories: IRepository[];\n  loading: boolean;\n  error?: string | null;\n}\n\nexport const initialState: IState = {\n  repositories: [],\n  loading: false,\n  error: null,\n};\n\nconst slice = createSlice({\n  name: sliceName,\n  initialState,\n  reducers: {\n    getRepositories: (\n      state: IState,\n      action: PayloadAction<{ filters: IRepositoryFilter[] }>\n    ): void => {\n      state.loading = true;\n      state.error = null;\n    },\n    getRepositoriesSuccess: (\n      state: IState,\n      action: PayloadAction<{ repositories: IRepository[] }>\n    ): void => {\n      const { repositories } = action.payload;\n      state.repositories = repositories;\n      state.loading = false;\n      state.error = null;\n    },\n    getRepositoriesFailure: (state: IState, action: PayloadAction<string>): void => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    updateRepositoryStarred: (\n      state: IState,\n      action: PayloadAction<{\n        repository: IRepository;\n        star: boolean;\n        filters: IRepositoryFilter[];\n      }>\n    ): void => {\n      state.loading = true;\n      state.error = null;\n    },\n    updateRepositoryStarredSuccess: (\n      state: IState,\n      action: PayloadAction<{ repository: IRepository }>\n    ): void => {\n      state.loading = false;\n      state.error = null;\n    },\n    updateRepositoryStarredFailure: (\n      state: IState,\n      action: PayloadAction<{ repository: IRepository; error: string }>\n    ): void => {\n      state.loading = false;\n      state.error = action.payload.error;\n    },\n  },\n});\n\nexport const { actions, reducer } = slice;\n","export const config = {\n  github: {\n    baseUrl: process.env.REACT_APP_API_BASE_URL,\n  },\n};\n","import { config } from '../config';\nimport { IRepository } from '../models';\nimport { IApiListResponse } from '../models/IApiListResponse';\nimport { IRepositoryFilter, Persistence } from '../shared';\n\nimport axios, { AxiosResponse } from 'axios';\nimport moment from 'moment';\n\naxios.defaults.headers['Accept'] = 'application/vnd.github.v3+json';\n\nexport const LOCAL_STORAGE_STARS_KEY = 'GITHUB-STARRED-REPOS';\nexport const persistence = new Persistence(window);\n\nconst starUnStarRepo = (starredIds: number[]) => (repo: IRepository): IRepository => ({\n  ...repo,\n  extras: { starred: starredIds.includes(repo.id) },\n});\n\nexport const getWeeklyRepos = (filters?: IRepositoryFilter[]): Promise<IRepository[]> => {\n  const weekBack = moment().subtract(7, 'days').format('YYYY-MM-DD');\n  const weekFilter: IRepositoryFilter = { key: 'created', operator: '>', value: weekBack };\n\n  const starredFilter = filters?.find((filter) => filter.key === 'starred');\n  const queryFilters = filters?.filter((filter) => filter.key !== 'starred');\n\n  const filtersQueryString = [weekFilter, ...(queryFilters ?? [])]\n    .map((f) => `${f.key}:${f.operator === '=' ? '' : f.operator}${f.value}`)\n    .join('+');\n  const url =\n    config.github.baseUrl + `/search/repositories?q=${filtersQueryString}&sort=stars&order=desc`;\n\n  return axios\n    .get<IApiListResponse<IRepository>>(url)\n    .then((res): IRepository[] => res.data.items)\n    .then((repos: IRepository[]) =>\n      repos.map(starUnStarRepo(persistence.get(LOCAL_STORAGE_STARS_KEY) ?? []))\n    )\n    .then((repos: IRepository[]) => {\n      if (starredFilter !== undefined) {\n        const starredFilterPredicate = (r: IRepository) =>\n          starredFilter.value === 'false' ? !r.extras.starred : r.extras.starred;\n\n        return repos.filter(starredFilterPredicate);\n      }\n\n      return repos;\n    });\n};\n\nexport const starRepo = (repo: IRepository): Promise<boolean> => {\n  return new Promise((resolve) => {\n    const starredRepoIds: number[] = persistence.get(LOCAL_STORAGE_STARS_KEY) ?? [];\n\n    if (!starredRepoIds.includes(repo.id)) {\n      persistence.set(LOCAL_STORAGE_STARS_KEY, [...starredRepoIds, repo.id]);\n    }\n\n    resolve(true);\n  });\n};\n\nexport const unStarRepo = (repo: IRepository): Promise<boolean> => {\n  return new Promise((resolve) => {\n    const starredRepoIds: number[] = persistence.get(LOCAL_STORAGE_STARS_KEY) ?? [];\n\n    if (starredRepoIds.includes(repo.id)) {\n      persistence.set(\n        LOCAL_STORAGE_STARS_KEY,\n        starredRepoIds.filter((id) => id !== repo.id)\n      );\n    }\n\n    resolve(true);\n  });\n};\n","import { Action } from '@reduxjs/toolkit';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport * as githubApi from '../../../api/github.api';\nimport { IRepository } from '../../../models';\nimport { actions } from './reducer';\n\nexport function* fetchRepositories(action: Action): Generator {\n  try {\n    if (actions.getRepositories.match(action)) {\n      const fetchedRepos = yield call(githubApi.getWeeklyRepos, action.payload.filters);\n      yield put(actions.getRepositoriesSuccess({ repositories: fetchedRepos as IRepository[] }));\n    }\n  } catch (e) {\n    yield put(actions.getRepositoriesFailure(e.message));\n  }\n}\n\nexport function* updateRepository(action: Action): Generator {\n  if (actions.updateRepositoryStarred.match(action)) {\n    const repo = action.payload.repository as IRepository;\n\n    try {\n      const methodToCall = action.payload.star ? githubApi.starRepo : githubApi.unStarRepo;\n      yield call(methodToCall, repo);\n      yield put(actions.updateRepositoryStarredSuccess({ repository: repo }));\n      yield put(actions.getRepositories({ filters: action.payload.filters }));\n    } catch (e) {\n      yield put(actions.updateRepositoryStarredFailure({ repository: repo, error: e.message }));\n    }\n  }\n}\n\nexport function* listener(): Generator {\n  yield takeLatest(actions.getRepositories.type, fetchRepositories);\n  yield takeLatest(actions.updateRepositoryStarred.type, updateRepository);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { repositoryReducer } from '../features/repository';\n\nconst rootReducer = combineReducers({\n  repositorySlice: repositoryReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","export class Persistence {\n  private storage: Storage;\n\n  constructor(win?: Window) {\n    const w = win ?? window;\n    this.storage = w.localStorage;\n  }\n\n  set(key: string, item: any): void {\n    this.storage.setItem(key, JSON.stringify(item));\n  }\n\n  get<T>(key: string): T | null {\n    const item = this.storage.getItem(key);\n\n    return item === null ? null : (JSON.parse(item) as T);\n  }\n}\n","export * from './interfaces/repository';\nexport * from './utils/Persistence';\n"],"sourceRoot":""}